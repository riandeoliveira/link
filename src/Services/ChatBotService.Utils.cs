using LinkJoBot.Enums;
using Telegram.Bot.Types;

namespace LinkJoBot.Services;

public partial class ChatBotService
{
    public static IEnumerable<BotCommand> GetChatBotCommands()
    {
        IEnumerable<BotCommand> commands =
        [
            new BotCommand
            {
                Command = "help",
                Description = "üìñ Exibir todos os comandos dispon√≠veis",
            },
            new BotCommand
            {
                Command = "ignore",
                Description = "üîÅ Ativar/desativar exibi√ß√£o de vagas j√° enviadas anteriormente",
            },
            new BotCommand
            {
                Command = "keywords",
                Description = "üìù Definir palavras-chave para a busca",
            },
            new BotCommand
            {
                Command = "limit",
                Description = "üéØ Definir o n√∫mero m√°ximo de vagas por busca",
            },
            new BotCommand
            {
                Command = "postedtime",
                Description = "‚è±Ô∏è Definir o tempo m√°ximo desde a publica√ß√£o da vaga",
            },
            new BotCommand
            {
                Command = "reset",
                Description = "‚ôªÔ∏è Redefinir todas as configura√ß√µes atuais",
            },
            new BotCommand
            {
                Command = "search",
                Description = "üîé Iniciar a busca de vagas no LinkedIn",
            },
            new BotCommand { Command = "status", Description = "üìã Ver as configura√ß√µes atuais" },
            new BotCommand
            {
                Command = "worktype",
                Description =
                    "üè¢ Definir o modelo de trabalho (Presencial, Remoto, H√≠brido ou Todos)",
            },
        ];

        return commands;
    }

    public async Task<Entities.User> GetOrCreateUserByChatIdAsync(
        string chatId,
        CancellationToken cancellationToken
    )
    {
        if (_userCache.TryGetValue(chatId, out Entities.User? cachedUser))
            return cachedUser;

        Entities.User? user = await _userRepository.FindOneAsync(
            x => x.ChatId == chatId,
            cancellationToken
        );

        if (user is null)
        {
            user = new() { ChatId = chatId };

            await _userRepository.CreateAsync(user, cancellationToken);
            await _unitOfWork.CommitAsync(cancellationToken);
        }

        _userCache[chatId] = user;

        return user;
    }
}
